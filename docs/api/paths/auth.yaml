# RECOMMENDED REGISTRATION FLOW (3-Step Process)

/auth/check-email:
  post:
    tags:
      - Authentication
    summary: Step 1 - Check email and send verification OTP
    description: |
      **RECOMMENDED REGISTRATION FLOW - STEP 1**
      
      Checks if an email is available for registration and sends a verification OTP code 
      to the email address. This is the first step in the secure 2-step registration process.
      
      The user should receive an email with a 6-digit verification code that expires in 10 minutes.
    security: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email]
            properties:
              email:
                type: string
                format: email
                example: "john.doe@example.com"
                description: "Valid email address to register"
          examples:
            example1:
              summary: "Standard email check"
              value:
                email: "john.doe@example.com"
    responses:
      '200':
        description: Verification code sent successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "Verification code sent to your email. Please check your inbox."
                data:
                  type: object
                  properties:
                    email:
                      type: string
                      example: "john.doe@example.com"
                    expiresIn:
                      type: string
                      example: "10 minutes"
      '400':
        $ref: '../responses/common.yaml#/BadRequest'
      '409':
        description: Email already registered
        content:
          application/json:
            schema:
              type: object
              properties:
                error:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "User with this email already exists"
      '429':
        $ref: '../responses/common.yaml#/TooManyRequests'
      '500':
        description: Failed to send verification email
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/ErrorResponse'

# STEP 2 – CONFIRM EMAIL WITH OTP

/auth/confirm-email:
  post:
    tags:
      - Authentication
    summary: Step 2 - Confirm email with OTP
    description: |
      **RECOMMENDED REGISTRATION FLOW – STEP 2**
      
      Verifies the 6-digit OTP sent to the user's email address in **Step 1**.  On success,
      the email is marked as verified so that the user can proceed to **Step 3 – Register**.
    security: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email, code]
            properties:
              email:
                type: string
                format: email
                example: "john.doe@example.com"
              code:
                type: string
                example: "123456"
                description: "6-digit verification code received via email"
    responses:
      '200':
        description: Email verified successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "Email verified successfully. You can now complete registration."
      '400':
        $ref: '../responses/common.yaml#/BadRequest'
      '429':
        $ref: '../responses/common.yaml#/TooManyRequests'

# STEP 3 – REGISTER USER (password & profile info)

/auth/register:
  post:
    tags:
      - Authentication
    summary: Step 3 - Complete registration (after email verified)
    description: |
      **RECOMMENDED REGISTRATION FLOW – STEP 3**
      
      Creates the user account.  This endpoint requires that the email address has been
      verified via **/auth/confirm-email**.
    security: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email, password, firstName, lastName]
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                minLength: 8
                example: "SecurePass123!"
              firstName:
                type: string
                example: "John"
              lastName:
                type: string
                example: "Doe"
    responses:
      '201':
        description: Registration completed successfully
        content:
          application/json:
            schema:
              $ref: '../schemas/user.yaml#/TokenResponse'
      '400':
        $ref: '../responses/common.yaml#/BadRequest'
      '409':
        description: User already exists
        content:
          application/json:
            schema:
              $ref: '../schemas/common.yaml#/ErrorResponse'
      '429':
        $ref: '../responses/common.yaml#/TooManyRequests'


/auth/resend-verification:
  post:
    tags:
      - Authentication
    summary: Resend verification email
    description: "Resends the email verification code to a user's email address."
    security: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email]
            properties:
              email:
                type: string
                format: email
                example: "john.doe@example.com"
    responses:
      '200':
        $ref: '../responses/common.yaml#/SuccessResponse'
      '400':
        $ref: '../responses/common.yaml#/BadRequest'
      '429':
        $ref: '../responses/common.yaml#/TooManyRequests'

/auth/login:
  post:
    tags:
      - Authentication
    summary: User login
    description: "Authenticates a user and returns JWT access and refresh tokens."
    security: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email, password]
            properties:
              email:
                type: string
                format: email
                example: "john.doe@example.com"
              password:
                type: string
                example: "SecurePass123!"
    responses:
      '200':
        description: Login successful
        content:
          application/json:
            schema:
              $ref: '../schemas/user.yaml#/TokenResponse'
      '401':
        $ref: '../responses/common.yaml#/Unauthorized'
      '429':
        $ref: '../responses/common.yaml#/TooManyRequests'

/auth/refresh-token:
  post:
    tags:
      - Authentication
    summary: Refresh access token
    description: "Issues a new access token using a valid refresh token."
    security: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [refreshToken]
            properties:
              refreshToken:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    responses:
      '200':
        description: Token refreshed successfully
        content:
          application/json:
            schema:
              $ref: '../schemas/user.yaml#/TokenResponse'
      '401':
        $ref: '../responses/common.yaml#/Unauthorized'

/auth/logout:
  post:
    tags:
      - Authentication
    summary: User logout
    description: "Invalidates the user's refresh token, effectively logging them out."
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [refreshToken]
            properties:
              refreshToken:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    responses:
      '200':
        $ref: '../responses/common.yaml#/SuccessResponse'
      '400':
        $ref: '../responses/common.yaml#/BadRequest'
      '401':
        $ref: '../responses/common.yaml#/Unauthorized'

/auth/forgot-password:
  post:
    tags:
      - Authentication
    summary: Forgot password
    description: "Sends a password reset link to the user's email."
    security: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [email]
            properties:
              email:
                type: string
                format: email
                example: "john.doe@example.com"
    responses:
      '200':
        $ref: '../responses/common.yaml#/SuccessResponse'
      '400':
        $ref: '../responses/common.yaml#/BadRequest'
      '429':
        $ref: '../responses/common.yaml#/TooManyRequests'

/auth/reset-password:
  post:
    tags:
      - Authentication
    summary: Reset password
    description: "Resets the user's password using a valid reset token."
    security: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [token, newPassword]
            properties:
              token:
                type: string
                example: "abcd1234efgh5678ijkl9012mnop3456"
                description: "Password reset token received in email"
              newPassword:
                type: string
                minLength: 8
                example: "NewSecurePass123!"
                description: "New password meeting complexity requirements"
    responses:
      '200':
        $ref: '../responses/common.yaml#/SuccessResponse'
      '400':
        $ref: '../responses/common.yaml#/BadRequest'
      '401':
        $ref: '../responses/common.yaml#/Unauthorized'
      '429':
        $ref: '../responses/common.yaml#/TooManyRequests'

/auth/change-password:
  put:
    tags:
      - Authentication
    summary: Change password
    description: "Changes the authenticated user's password."
    security:
      - bearerAuth: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [currentPassword, newPassword]
            properties:
              currentPassword:
                type: string
                example: "CurrentPass123!"
                description: "User's current password"
              newPassword:
                type: string
                minLength: 8
                example: "NewSecurePass123!"
                description: "New password meeting complexity requirements"
    responses:
      '200':
        $ref: '../responses/common.yaml#/SuccessResponse'
      '400':
        $ref: '../responses/common.yaml#/BadRequest'
      '401':
        $ref: '../responses/common.yaml#/Unauthorized'
      '429':
        $ref: '../responses/common.yaml#/TooManyRequests'

/auth/google:
  get:
    tags:
      - Authentication
    summary: Initiate Google OAuth
    description: "Redirects to Google OAuth for authentication."
    security: []
    parameters:
      - name: redirect
        in: query
        description: "URL to redirect after successful authentication"
        required: false
        schema:
          type: string
          format: uri
          example: "https://myapp.com/dashboard"
    responses:
      '302':
        description: Redirect to Google OAuth
      '400':
        $ref: '../responses/common.yaml#/BadRequest'
      '429':
        $ref: '../responses/common.yaml#/TooManyRequests'

/auth/google/callback:
  get:
    tags:
      - Authentication
    summary: Google OAuth callback
    description: "Handles the callback from Google OAuth."
    security: []
    parameters:
      - name: code
        in: query
        description: "Authorization code from Google"
        required: true
        schema:
          type: string
      - name: state
        in: query
        description: "State parameter for CSRF protection"
        required: false
        schema:
          type: string
    responses:
      '302':
        description: Redirect to success page with tokens
      '400':
        $ref: '../responses/common.yaml#/BadRequest'
      '401':
        $ref: '../responses/common.yaml#/Unauthorized' 